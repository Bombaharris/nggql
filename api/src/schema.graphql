enum Seniority {
    JUNIOR
    REGULAR
    SENIOR
}

type Person {
  id: ID! @id(autogenerate: true)
  name: String!
  surname: String!
  birthday: Date
  location: Point
  seniority: Seniority @coalesce(value: REGULAR)
  skills: [Skill!]! @relationship(type: "HAS_SKILL", direction: OUT)
  roles: [Role!]! @relationship(type: "HAS_ROLE", direction: OUT)
  rates: [Rate!]! @relationship(type: "HAS_RATE", direction: OUT)
  projects: [Project!]! @relationship(type: "HAS_PROJECT", direction: OUT)
  departments: [Department!]! @relationship(type: "HAS_DEPARTMENT", direction: OUT)
  experiences: [Experience!]! @relationship(type: "HAS_EXPERIENCE", direction: OUT)
}

type Experience {
  id: ID! @id(autogenerate: true)
  person: Person @relationship(type: "HAS_EXPERIENCE", direction: IN)
  name: String!
  description: String!
  skills: [Skill!]! @relationship(type: "USED_SKILL", direction: OUT)
  startedFrom: Date!
  gainedAt: Date!
}

type Skill {
  id: ID! @id(autogenerate: true)
  name: String!
  persons: [Person!]! @relationship(type: "HAS_SKILL", direction: IN)
  experiences: [Experience!]! @relationship(type: "USED_SKILL", direction: IN)
}

type Role {
  id: ID! @id(autogenerate: true)
  name: String!
}

type Project {
  id: ID! @id(autogenerate: true)
  name: String!
  skills: [Skill!]! @relationship(type: "NEED_SKILL", direction:OUT)
  persons: [Person!]! @relationship(type: "HAS_PROJECT", direction: IN)
  startedFrom: Date!
  duration: Duration!
}

type Department {
  id: ID! @id(autogenerate: true)
  name: String!
  manager: Person @relationship(type: "MANAGED_BY", direction: OUT)
  persons: [Person!]! @relationship(type: "HAS_DEPARTMENT", direction: IN)
}

type Rate {
  id: ID! @id(autogenerate: true)
  value: Float!
  validFrom: Date!
  person: Person! @relationship(type: "HAS_RATE", direction: OUT)
}

type PersonsToProject {
    people: [PersonWithScore] @cypher(statement: """
        MATCH (p:Person)-[:HAS_SKILL]->(skill:Skill)<-[:NEED_SKILL]-(pr:Project)
        RETURN p,COUNT(*) AS score ORDER BY score DESC
    """)
}

type Score {
  score: Int
}

union PersonWithScore = Person | Score

type QueryP {
    people: [Person]
        @cypher(
            statement: """
            MATCH (p:Person)
            RETURN p
            """
        )
}
